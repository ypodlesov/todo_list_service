// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/create_task": {
            "post": {
                "description": "Create new task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create new task",
                "operationId": "create-task",
                "parameters": [
                    {
                        "description": "request scheme",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateTaskResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/get_task": {
            "get": {
                "description": "Get task by task_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get task by task_id",
                "operationId": "get-task",
                "parameters": [
                    {
                        "description": "request scheme",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.GetTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetTaskResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/get_tasks": {
            "get": {
                "description": "Get all tasks ordered by priority (desc) for certain user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all tasks ordered by priority (desc) for certain user",
                "operationId": "get-tasks",
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetTasksResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Logout",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Logout",
                "operationId": "logout",
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sign_in": {
            "post": {
                "description": "Sign in for user by username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign in for user by username and password",
                "operationId": "sign-in",
                "parameters": [
                    {
                        "description": "request scheme",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sign_up": {
            "post": {
                "description": "Sign up for new user by username, password, email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Sign up for new user by username, password, email",
                "operationId": "sign-up",
                "parameters": [
                    {
                        "description": "request scheme",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update_priority": {
            "post": {
                "description": "Update task priority",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update task priority",
                "operationId": "update-priority",
                "parameters": [
                    {
                        "description": "request scheme",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePriorityRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdatePriorityResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update_task": {
            "post": {
                "description": "Update task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update task",
                "operationId": "update-task",
                "parameters": [
                    {
                        "description": "request scheme",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateTaskResponse"
                        }
                    },
                    "400": {
                        "description": "incorrect request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateTaskRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "handlers.CreateTaskResponse": {
            "type": "object",
            "properties": {
                "task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "handlers.GetTaskRequest": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.GetTaskResponse": {
            "type": "object",
            "properties": {
                "task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "handlers.GetTasksResponse": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/storage.Task"
                    }
                }
            }
        },
        "handlers.SignInRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.SignUpRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.UpdatePriorityRequest": {
            "type": "object",
            "properties": {
                "next_task_priority": {
                    "type": "integer"
                },
                "prev_task_priority": {
                    "type": "integer"
                },
                "target_task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "handlers.UpdatePriorityResponse": {
            "type": "object",
            "properties": {
                "task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "handlers.UpdateTaskRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "handlers.UpdateTaskResponse": {
            "type": "object",
            "properties": {
                "task": {
                    "$ref": "#/definitions/storage.Task"
                }
            }
        },
        "storage.Task": {
            "type": "object",
            "properties": {
                "creation_ts": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "priority": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "todo-list",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server Petstore server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
